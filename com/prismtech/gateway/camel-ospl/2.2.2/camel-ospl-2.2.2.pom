<?xml version="1.0" encoding="UTF-8"?>
<!--

                             Vortex Gateway

       This software and documentation are Copyright 2010 to 2016 PrismTech
       Limited and its licensees. All rights reserved. See file:

                              docs/LICENSE.html

       for full copyright notice and license terms.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.prismtech.gateway</groupId>
    <artifactId>parent-pom</artifactId>
    <version>2.2.2</version>
    <relativePath>../parent-pom</relativePath>
  </parent>
  <distributionManagement>
    <repository>
      <id>internal.repo</id>
      <name>Temporary Staging Repository</name>
      <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
  </distributionManagement>
  <groupId>com.prismtech.gateway</groupId>
  <artifactId>camel-ospl</artifactId>
  <packaging>jar</packaging>
  <name>Gateway Camel/OpenSpliceDDS component</name>
  <description>Camel DDS support using OpenSpliceDDS Enterprise</description>
  <url>http://www.prismtech.com</url>
  <properties>
    <camel.osgi.export.pkg>com.prismtech.gateway.camelospl.*</camel.osgi.export.pkg>
    <!-- github server corresponds to entry in ~/.m2/settings.xml -->
    <github.global.server>github</github.global.server>
  </properties>
  <repositories>
    <repository>
      <id>essai-mvn-repo</id>
      <url>https://raw.github.com/jean-marline/essai/mvn-repo/</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
    </repository>
  </repositories>
  <dependencies>
    <!-- OpenSplice DDS -->
    <dependency>
      <groupId>org.opensplice</groupId>
      <artifactId>dcpssaj</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <!-- For tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-mina</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <version>${maven-artifact-version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.1</version>
        <configuration>
          <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.github</groupId>
        <artifactId>site-maven-plugin</artifactId>
        <version>0.12</version>
        <configuration>
          <message>Maven artifacts for ${project.version}</message>
          <!-- git commit message -->
          <noJekyll>true</noJekyll>
          <!-- disable webpage processing -->
          <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
          <!-- matches distribution management repository url above -->
          <branch>refs/heads/mvn-repo</branch>
          <!-- remote branch name -->
          <includes>
            <include>**/*</include>
          </includes>
          <repositoryName>essai</repositoryName>
          <!-- github repo name -->
          <repositoryOwner>jean-marline</repositoryOwner>
          <!-- github username  -->
        </configuration>
        <executions>
          <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
          <execution>
            <goals>
              <goal>site</goal>
            </goals>
            <phase>deploy</phase>
          </execution>
        </executions>
      </plugin>
      <!-- Copy the ANY.lic file in ~/etc -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${user.home}/etc</outputDirectory>
              <resources>
                <resource>
                  <directory>../rlm/java/rlm-standalone/src/test/resources/</directory>
                  <includes>
                    <include>ANY.lic</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Java Code Formatter -->
      <plugin>
        <groupId>com.googlecode.maven-java-formatter-plugin</groupId>
        <artifactId>maven-java-formatter-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- add ${project.build.directory}/generated-sources/java as sources -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-templates-generated-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-generated-sources</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-test-sources/idl</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.prismtech.gateway</groupId>
        <artifactId>opensplice-idl-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <id>generate-cameldds-idl</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>idl-compile</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-test-idl</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>idl-compile</goal>
            </goals>
            <configuration>
              <idlDir>src/test/idl</idlDir>
              <outDir>${project.build.directory}/generated-test-sources/idl</outDir>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin-version}</version>
        <configuration>
          <!-- Run tests in alphabetical to have AAA_OsplStart_BeforeTest
                         and ZZZ_OsplStop_AfterTest run before and after all tests.
                    -->
          <runOrder>alphabetical</runOrder>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>com.googlecode.maven-java-formatter-plugin</groupId>
                    <artifactId>maven-java-formatter-plugin</artifactId>
                    <versionRange>
                                         [${maven-java-formatter-plugin-version},)
                                      </versionRange>
                    <goals>
                      <goal>format</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <profiles>
    <!-- "licensed" profile (always active, unless -Dunlicensed is used): -->
    <!-- add src/main/java_templates/licensed as filtered resources       -->
    <profile>
      <id>licensed</id>
      <activation>
        <property>
          <name>!unlicensed</name>
        </property>
      </activation>
      <dependencies>
        <!-- RLM -->
        <dependency>
          <groupId>com.prismtech</groupId>
          <artifactId>rlm-standalone</artifactId>
        </dependency>
      </dependencies>
      <build>
        <resources>
          <resource>
            <directory>src/main/java_templates/licensed</directory>
            <targetPath>${project.build.directory}/generated-sources/java</targetPath>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    <!-- "unlicensed" profile (if -Dunlicensed is used):              -->
    <!-- add src/main/java_templates/unlicensed as filtered resources -->
    <profile>
      <id>unlicensed</id>
      <activation>
        <property>
          <name>unlicensed</name>
        </property>
      </activation>
      <build>
        <resources>
          <resource>
            <directory>src/main/java_templates/unlicensed</directory>
            <targetPath>${project.build.directory}/generated-sources/java</targetPath>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
    <!-- "obfuscated" profile (activated on demand): -->
    <!-- obfuscate the code using Proguard           -->
    <profile>
      <id>obfuscated</id>
      <activation>
        <property>
          <name>obfuscated</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.wvengen</groupId>
            <artifactId>proguard-maven-plugin</artifactId>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>proguard</goal>
                </goals>
                <configuration>
                  <options>
                    <!-- don't obfuscate public classes -->
                    <option>-keep public class com.prismtech.gateway.camelospl.* { *; }</option>
                    <option>-keep public class com.prismtech.gateway.camelext.* { *; }</option>
                    <option>-keep public class CamelDDS.* { *; }</option>
                    <!-- don't obfuscate any "value" members, as acceded via reflection -->
                    <option>-keepclassmembers class * { public ** value; }</option>
                    <!-- group all obfuscated classes in a same package -->
                    <option>-repackageclasses 'com.prismtech.gateway.camelospl.obfuscated'</option>
                    <!-- keep info for stack traces -->
                    <option>-keepattributes SourceFile,LineNumberTable</option>
                  </options>
                  <libs>
                    <lib>${java.home}/lib/rt.jar</lib>
                  </libs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
