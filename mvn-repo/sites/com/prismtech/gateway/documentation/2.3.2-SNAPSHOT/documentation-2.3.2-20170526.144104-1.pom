<?xml version="1.0"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.prismtech.gateway</groupId>
        <artifactId>parent-pom-dev</artifactId>
        <version>2.3.2-SNAPSHOT</version>
    </parent>

    <artifactId>documentation</artifactId>

    <name>Gateway documentation</name>

    <distributionManagement>
        <site>
            <id>site</id>
            <name>Gateway Site</name>
            <url>file://${PWD}/target/documentation</url>
        </site>
    </distributionManagement>

    <!--  Add the following snippet to any project's pom that depends on your project
    Now any project that requires your jar files will automatically download them from 
    your github maven repository.-->
    <repositories>
    <repository>
      <id>essai-mvn-repo</id>
      <url>https://raw.github.com/jean-marline/essai/gh-pages/mvn-repo/sites</url>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
      </snapshots>
    </repository>
    </repositories>
    
    <properties>
        <!-- This is a trick to escape some variables from filtering: -->
        <!-- ${dollar}{XYZ} is filtered as ${XYZ} -->
        <dollar>$</dollar>
        <!-- directories definition -->
        <sphinx-sources>${project.basedir}/src/site/sphinx</sphinx-sources>
        <sphinx-copied-sources>${project.build.directory}/sphinx-src</sphinx-copied-sources>
        <latex-user-guide>${project.build.directory}/latex/user-guide</latex-user-guide>      
	
	<!-- github server corresponds to entry in ~/.m2/settings.xml -->
        <github.global.server>github</github.global.server>
	
        <github.repositoryName>essai</github.repositoryName>

        <github.repositoryOwner>jean-marline</github.repositoryOwner>
    </properties>

    <build>
        <plugins>
          <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.1</version>
        <configuration>
          <altDeploymentRepository>internal.repo::default::file://${PWD}/target/documentation</altDeploymentRepository>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.github.github</groupId>
        <artifactId>site-maven-plugin</artifactId>
        <version>0.12</version>
        <configuration>
          <message>Maven documentation for ${project.version}</message>
          <!-- git commit message -->
          <noJekyll>true</noJekyll>
          <!-- disable webpage processing -->
          <outputDirectory>${PWD}/target/documentation</outputDirectory>
          <!-- matches distribution management repository url above -->
          <branch>refs/heads/gh-pages</branch>
          <!-- remote branch name -->
          <includes>
            <include>**/*</include>
          </includes>
          <repositoryName>${github.repositoryName}</repositoryName>
          <!-- github repo name -->
          <repositoryOwner>${github.repositoryOwner}</repositoryOwner>
          <!-- github username  -->
	  <!--merge>true</merge-->
	  <path>mvn-repo/sites</path>
        </configuration>
        <executions>
          <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
          <execution>
            <goals>
              <goal>site</goal>
            </goals>
            <phase>deploy</phase>
          </execution>
        </executions>
          </plugin>
	  
            <!-- HTML site generation -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <locales>en</locales>
                    <stagingDirectory>${PWD}/target/stagesite</stagingDirectory>
                    <reportPlugins>
                        <reportPlugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-changes-plugin</artifactId>
                            <reportSets>
                                <reportSet>
                                    <id>default</id>
                                    <reports>
                                        <report>changes-report</report>
                                    </reports>
                                </reportSet>
                            </reportSets>
                        </reportPlugin>
                    </reportPlugins>
                </configuration>
                <executions>
                    <execution>
                        <id>Generate HTML documentation</id>
                        <goals>
                            <goal>site</goal>
                        </goals>
                        <phase>generate-sources</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>license-maven-plugin</artifactId>
                        <version>${license-maven-plugin-version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>Generate 3d Party licenses files</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source><![CDATA[
                            mvnCommand = ["mvn"]
                            mvnGoal = ["license:add-third-party"]
                            commonOptions = [
                               "-Dlicense.fileTemplate=${basedir}/src/license-maven-plugin/third-party-file.ftl",
                               "-Dlicense.outputDirectory=${project.build.directory}/generated-resources",
                               "-Dlicense.excludedScopes=test",
                               "-Dlicense.excludedGroups=com.prismtech.gateway" ]

                            def genLicensesFile(projectName) {
                                def pomFile = "${basedir}/../${projectName}/pom.xml"
                                def extraOptions = "-Dlicense.thirdPartyFilename=${projectName}-THIRD-PARTY.html"
                                def proc = (mvnCommand + "-f" + pomFile + mvnGoal + commonOptions + extraOptions).execute()
                                proc.waitFor()
                                println "${proc.in.text}"
                                println "${proc.err.text}"
                                if (proc.exitValue() != 0) fail("Maven command failed with exit value: "+proc.exitValue())
                            }

                            def replaceInHtml(projectName) {
                               def htmlFile = "${project.reporting.outputDirectory}/docs/third_party_licenses.html"
                               def contentFileName = "${projectName}-THIRD-PARTY.html"
                               def content = new File("${project.build.directory}/generated-resources/${contentFileName}").text
                               ant.replace(file: htmlFile, token: "REPLACE_WITH_CONTENT_${contentFileName}", value: "${content}")
                            }

                            // Generate licenses file for opensplice-idl-plugin
                            genLicensesFile("opensplice-idl-plugin")

                            // Generate licenses file for camel-ospl
                            genLicensesFile("camel-ospl")

                            // Replace placeholders in third_party_licenses.html with files content
                            replaceInHtml("opensplice-idl-plugin")
                            replaceInHtml("camel-ospl")

                            ]]>
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse 
                    m2e settings only. It has no influence on the Maven build itself. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-site-plugin</artifactId>
                                        <versionRange>${maven-site-plugin-version}</versionRange>
                                        <goals>
                                            <goal>site</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.codehaus.gmaven</groupId>
                                        <artifactId>gmaven-plugin</artifactId>
                                        <versionRange>${gmaven-plugin-version}</versionRange>
                                        <goals>
                                            <goal>execute</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


    <!-- "validation" profile: generate PDF docs -->
    <profiles>
        <profile>
            <id>validation</id>
            <build>
                <plugins>
                    <!-- Get current year for copyright property -->
                    <plugin>
                        <groupId>com.keyboardsamurais.maven</groupId>
                        <artifactId>maven-timestamp-plugin</artifactId>
                        <version>${maven-timestamp-plugin-version}</version>
                        <executions>
                            <execution>
                                <phase>validate</phase>
                                <goals>
                                    <goal>create</goal>
                                </goals>
                                <inherited>false</inherited>
                                <configuration>
                                    <propertyName>copyrightYear</propertyName>
                                    <timestampPattern>yyyy</timestampPattern>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Copy and replace placeholders in doc sources -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>src/site/sphinx</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${sphinx-copied-sources}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Generate HTML doc -->
                    <plugin>
                        <groupId>kr.motd.maven</groupId>
                        <artifactId>sphinx-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>Generate User Guide HTML documentation (from reSt Text)</id>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <sourceDirectory>${sphinx-copied-sources}/user-guide</sourceDirectory>
                                    <outputDirectory>${project.build.directory}/site/docs/user-guide</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                                       
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
